# Name of your application. Used to uniquely configure containers.
service: decidim-modules 

# Name of the container image.
image: platoniq/decidim-modules

# Deploy to these servers.
servers:
  web:
    - modules.demo.platoniq.net
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

deploy_timeout: 120

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: modules.demo.platoniq.net
  app_port: 3000

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: registry.platoniq.net
  username: 
    - REGISTRY_USER

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password: 
    - REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64
  # Pass in additional build args needed for your Dockerfile.
  # args:
  #   RUBY_VERSION: <%= File.read('.ruby-version').strip %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    RAILS_SERVE_STATIC_FILES: true
    DECIDIM_APPLICATION_NAME: "Demo Modules"
    DECIDIM_MAILER_SENDER: no-reply@platoniq.net
    DECIDIM_AVAILABLE_LOCALES: "en,es,ca"
    DECIDIM_DEFAULT_LOCALE: "ca"
    STORAGE_PROVIDER: s3
    DECIDIM_FORCE_SSL: false
  secret:
    - RAILS_MASTER_KEY
    - SECRET_KEY_BASE
    - DATABASE_URL
    - SMTP_ADDRESS
    - SMTP_USERNAME
    - SMTP_PASSWORD
    - SMTP_DOMAIN
    - SMTP_STARTTLS_AUTO
    - POSTGRES_PASSWORD
    - POSTGRES_USER
    - POSTGRES_DB
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_REGION
    - AWS_BUCKET


# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
asset_path: /app/public

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    image: postgres:16
    host: modules.demo.platoniq.net
    port: "127.0.0.1:3306:3306"
    env:
      secret:
        - POSTGRES_PASSWORD
        - POSTGRES_USER
        - POSTGRES_DB
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/mysql
  redis:
    image: valkey/valkey:8
    host: modules.demo.platoniq.net
    port: "127.0.0.1:6379:6379"
    directories:
      - data:/data
